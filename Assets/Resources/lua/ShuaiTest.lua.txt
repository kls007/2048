ShuaiTest = {}
local _M = ShuaiTest

function _M.__init__()
    ShuaiTest.require()
end

function _M.require()
end

function _M.Refresh(params)
    local keyCode = params.keyCode
    local keyCodeStr = tostring(keyCode)

    package.loaded["lua/ShuaiTest"] = nil
    require("lua/ShuaiTest")

    local functionTestKeyCode = ShuaiTest["Test" .. keyCodeStr]
    if functionTestKeyCode then
        functionTestKeyCode()
    else
        TipManager.Show("Test" .. keyCodeStr .. "不存在")
    end
end

function _M.TestQ()
    -- print_t("QQQ", "ShuaiTest")
    -- TipManager.Show("TestQ")

    -- print_t(_VERSION, "_VERSION")



    -- local param = 
    -- {
    --     data = 
    --     {
    --         {type = 2},
    --         {type = 1},
    --         {type = 3},
    --     },
    --     condition = 
    --     {
    --         {key = "type", value = 1},
    --         {key = "type", value = 2},
    --         {key = "type", value = 3},
    --     }
    -- }

    -- local res = AddItem(param)
    -- print(res)
    
    -- local array1 = {1, 2, 3, 4}
    -- local array2 = {3, 1, 2}
    -- local isTrue = functions.IsContainArray(array1, array2)
    -- print_t(isTrue, "IsContainArray")


    -- local array1 = {1, 2, 3, 4}
    -- local array2 = {3, 1, 2}
    -- local isTrue = functions.IsContainTable(array1, array2)
    -- print_t(isTrue, "IsContainTable")


    -- local array1 = {1, 2, 3, 4}
    -- for key1, item1 in pairs(array1) do
    --     -- body
    -- end

    local array = {"a", "b", "c", "d", "e"}
    array[1] = nil
    array[2] = nil
    array[4] = nil

    array[3] = nil
    array[5] = nil

    print(array[1])
    print(array[2])
    print(array[3])
    print(array[4])
    print(array[5])

    print(#array)

    -- local array1 = {1, 2, 3, 4}
    -- local array2 = {3, 1, 2}
    -- local isTrue = functions.IsContainTable(array1, SB.cookbook[1])
    -- print_t(isTrue, "IsContainTable")
    

    -- for index1 = #copy_array1, 1, -1 do
    --     local item1 = copy_array1[index1]
    --     for index2 = #copy_array2, 1, -1 do
    --         local item2 = copy_array2[index2]
    --         if item1 == item2 then
    --             table.remove(copy_array1, index1)
    --             table.remove(copy_array2, index2)
    --             break
    --         end
    --     end
    -- end
end

function _M.TestE()
    print_t("EEE", "ShuaiTest")
    -- TipManager.Show("TestE")
    

    print_t(GamePanel.list, "GamePanel.list")

    -- local path = "sprite/food"
    -- print_t(CS.ShuaiFramework.ResourceManager.LoadAssets(path .. "/" .. "Lettuce_Icon"))
    -- GamePanel.Image_Button_back.sprite = CS.ShuaiFramework.ResourceManager.LoadAssets(path .. "/" .. "Lettuce_Icon")
    -- spriteRenderer.sprite = CS.ShuaiFramework.ResourceManager.LoadAssets(path .. "/" .. sprite.value)
end

function _M.TestW()
    -- print_t("RRR", "ShuaiTest")
    -- TipManager.Show("TestR")
    GamePanel:Up()
end

function _M.TestS()
    -- print_t("SSS", "ShuaiTest")
    -- TipManager.Show("TestE")
    GamePanel:Down()
end

function _M.TestA()
    -- print_t("WWW", "ShuaiTest")
    -- TipManager.Show("TestW")
    GamePanel:Left()
end

function _M.TestD()
    -- print_t("EEE", "ShuaiTest")
    -- TipManager.Show("TestE")
    GamePanel:Right()
end


_M.__init__()

-- return _M

